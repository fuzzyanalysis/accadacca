<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui">

<h:head>
	<title>Basic GoJS Parse Tree Sample</title>
	<script src="js/go.js"></script>
	<link href="css/goSamples.css" rel="stylesheet" type="text/css"></link>
	<!-- you don't need to use this -->
	<script src="js/goSamples.js"></script>
	<!-- this is only for the GoJS Samples framework -->

</h:head>

<h:body onload="init()">

	<p:layout>
		<p:layoutUnit position="center">

			<h:form id="myForm">

				<p:remoteCommand name="getnodes"
					actionListener="#{buttonsBean.getJSON()}"
					update=":myForm:mySavedModel" />
				<h:inputText id="mySavedModel" value="#{buttonsBean.metadata}"
					style="border: solid 1px black; width: 100%; height: 100px" />
				<button onclick="load();">Load</button>

				<button onclick="load();">JSON</button>

				<br />

				<!-- 				<h:inputHidden id="hiddenButton" value="#{buttonsBean.clickValue}"/> -->
				<!-- 				<p:remoteCommand name="getclick" -->
				<!-- 					actionListener="#{buttonsBean.getClick()}" -->
				<!-- 					update=":myDetails:name" process=":myDetails:hiddenButton" /> -->



				<div id="myDiagram"
					style="border: solid 1px black; width: 100%; height: 500px"></div>

				<h:inputText id="html" value="#{buttonsBean.message}" />

			</h:form>

		</p:layoutUnit>
		<p:layoutUnit position="east" size="30%">

			<h:form id="myDetails">
				<p>

					<!--  note the remoteCommand must be below the control it processes, i.e. below hiddenButton -->
					<p:outputLabel for="hiddenButton" value="Javascript to Bean:" />
					<p:inputText id="hiddenButton" value="#{buttonsBean.clickValue}" />
					<p:remoteCommand name="getclick"
						actionListener="#{buttonsBean.getClick()}"
						update=":myDetails:description" process=":myDetails:hiddenButton" />
				</p>

				<p>
					<p:outputLabel for="description" value="Description:" />
					<p:inputText id="description" />
				</p>
				<p>
					<p:outputLabel value="Javascript Click:" />
					<p:inputText id="grapes" />

				</p>

				<p:ajaxStatus onstart="PF('statusDialog').show()"
					onsuccess="PF('statusDialog').hide()" />


				<p:dialog widgetVar="statusDialog" modal="true" draggable="false"
					closable="false" resizable="false" showHeader="false"
					fitViewport="true">
					<p:graphicImage name="/img/cat_running_2.gif"
						style="left: 100%; top: 100%;" />
					<br>Processing...</br>
				</p:dialog>

			</h:form>
		</p:layoutUnit>
	</p:layout>




	<script>

			function init() {

			    var $ = go.GraphObject.make;  // for conciseness in defining templates
			    myDiagram =
			      $(go.Diagram, "myDiagram",
			        {
			          allowCopy: false,
			          allowDelete: false,
			          allowMove: true,
			          initialContentAlignment: go.Spot.Center,
			          initialAutoScale: go.Diagram.Uniform,
			          layout:
			            $(FlatTreeLayout,  // custom Layout, defined below
			              { angle: 90,
			                compaction: go.TreeLayout.CompactionNone }),
			          "undoManager.isEnabled": true
			        });

			    myDiagram.nodeTemplate =
			      $(go.Node, "Vertical",
			        { selectionObjectName: "BODY" },
			        $(go.Panel, "Auto", { name: "BODY" },
			          $(go.Shape, "RoundedRectangle",
			            new go.Binding("fill"),
			            new go.Binding("stroke")),
			          $(go.TextBlock,
			            { font: "bold 12pt Arial", margin: new go.Margin(4, 2, 2, 2) },
			            new go.Binding("text"))
			        ),
			        $(go.Panel,  // this is underneath the "BODY"
			          { height: 15 },  // always this height, even if the TreeExpanderButton is not visible
			          $("TreeExpanderButton")
			        )
			      );

// 			    myDiagram.linkTemplate =
// 			      $(go.Link,
// 			        $(go.Shape, { strokeWidth: 1.5 }),
// 			        $(go.TextBlock, new go.Binding("text")) // this is a link label
// 			        );

  				myDiagram.linkTemplate =
    				$(go.Link,
      				$(go.Shape),                           // this is the link shape (the line)
      				$(go.Shape, { toArrow: "Standard" }),  // this is an arrowhead
      				$(go.TextBlock,                        // this is a Link label
        				new go.Binding("text", "linktext"))
    			);


				// handle clicks
							
				function showMessage(s) {
   					var elem = document.getElementById("myDetails:hiddenButton");
   					elem.value = s;
   					//getnodes();
   					document.getElementById('myDetails:hiddenButton').value = s;   					
   					getclick([{param: 'param1', value: elem.value}]);
  				}
			    
			    myDiagram.addDiagramListener("ObjectSingleClicked",
			    	      function(e) {
			    	        var part = e.subject.part;
			    	        if (!(part instanceof go.Link)) showMessage("Clicked on " + part.data.text);
			    	      });
		        

			    load();
			  } 

			  // Customize the TreeLayout to position all of the leaf nodes at the same vertical Y position.
			  function FlatTreeLayout() {
			    go.TreeLayout.call(this);  // call base constructor
			  }
			  go.Diagram.inherit(FlatTreeLayout, go.TreeLayout);

			  // This assumes the TreeLayout.angle is 90 -- growing downward
			  FlatTreeLayout.prototype.commitLayout = function() {
			    go.TreeLayout.prototype.commitLayout.call(this);  // call base method first
			    // find maximum Y position of all Nodes
			    var y = -Infinity;
			    this.network.vertexes.each(function(v) {
			        y = Math.max(y, v.node.position.y);
			      });
			    // move down all leaf nodes to that Y position, but keeping their X position
			    this.network.vertexes.each(function(v) {
			        var node = v.node;
			        if (node.isTreeLeaf) {
			          node.position = new go.Point(node.position.x, y);
			        }
			      });
			  };
			  // end FlatTreeLayout
			
				function load() {

					var htmlstring = document.getElementById('myForm:html').value;
					//alert(htmlstring);   
					getnodes();
				    var nodes = document.getElementById('myForm:mySavedModel').value;
				    //var nodes = "{#buttonsBean.metadata}"
				    //var nodes = getnodes();	  
				    var nodesString = new String(nodes);
				    alert('nodesString = ' + nodesString);      
				    var obj = JSON.parse(nodesString);   
					//nodes = new String(nodeString);	        
					myDiagram.model = go.Model.fromJson(obj);
					//myDiagram.model = go.Model.fromJson(nodes);
				}
 				</script>


</h:body>
</html>